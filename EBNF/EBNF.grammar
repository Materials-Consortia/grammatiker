//------------------------------------------------------------------------------
//$Author$
//$Date$
//$Revision$
//$URL$
//------------------------------------------------------------------------------

%header%
GRAMMARTYPE = "LL"

%tokens%

// Grammar of EBNF ISO/IEC 14977 : 1996(E)

letter = <<[a-zA-Z]>> // see 7.2
decimal_digit = <<[0-9]>> // see 7.2

// The representation of the following terminal-characters is defined
// in clauses 7.4 and tables 1, 2.

concatenate_symbol = ","
defining_symbol = "="
definition_separator_symbol = <<[}/!]>>
end_comment_symbol = "*)"
end_group_symbol = ")"
end_option_symbol = <<\]|/>>
end_repeat_symbol = <<\}|:\)>>
except_symbol = "-"
first_quote_symbol = <<'>>
repetition_symbol = "*"
second_quote_symbol = <<">>
special_sequence_symbol = "?"
start_comment_symbol = "(*"
start_group_symbol = "("
start_option_symbol = <<\[|\(/>>
start_repeat_symbol = <<\{|\(:>>
terminator_symbol = <<;|\.>>
// see 7.5
other_character = <<[ :+_%@&#$<>\\^`~]>>
// see 7.6
space_character= " "
horizontal_tabulation_character = <<\t>>
new_line = <<\r*\n\r*>>
vertical_tabulation_character = <<\v>>
form_feed = <<\f>>

%productions%

EBNF = syntax;

// The second part of the removal of unnecessary from a syntax.

// see 6.2
terminal_character =
    letter
    | decimal_digit
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    | first_quote_symbol
    | repetition_symbol
    | second_quote_symbol
    | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character ;

// see 6.2
// gap free symbol =
//     terminal character - (first quote symbol | second quote symbol)
gap_free_symbol = 
    letter
    | decimal_digit
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    // | first_quote_symbol
    | repetition_symbol
    // | second_quote_symbol
    | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character ;

// see 4.16
terminal_string =
    first_quote_symbol first_terminal_character
    {first_terminal_character} first_quote_symbol
    | second_quote_symbol second_terminal_character
    {second_terminal_character} second_quote_symbol ;

// see 4.17
// first terminal character = terminal character - first quote symbol
first_terminal_character =
    letter
    | decimal_digit
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    // | first_quote_symbol
    | repetition_symbol
    | second_quote_symbol
    | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character ;
    

// see 4.18
// second terminal character = terminal character - second quote symbol
second_terminal_character =
    letter
    | decimal_digit
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    | first_quote_symbol
    | repetition_symbol
    // | second_quote_symbol
    | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character ;

// see 6.4
gap_separator =
    space_character
    | horizontal_tabulation_character
    | new_line
    | vertical_tabulation_character
    | form_feed ;

// The third part of the syntax defines removal of
// bracketed-textual-comments gap-free-symbols that form a syntax.

// see 6.6
// commentless symbol
//   = terminal character
//     - (letter
//       | decimal digit
//       | first quote symbol
//       | second quote symbol
//       | start comment symbol
//       | end comment symbol
//       | special sequence symbol
//       | other character)
//   | meta identifier
//   | integer
//   | terminal string
//   | special sequence;

commentless_symbol =
    // letter
    // | decimal_digit
    concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    // | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    // | first_quote_symbol
    | repetition_symbol
    // | second_quote_symbol
    // | special_sequence_symbol
    // | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    // | other_character

    | meta_identifier
    | integer
    | terminal_string
    | special_sequence ;

// see 4.9
integer = decimal_digit {decimal_digit};

// see 4.14
meta_identifier = letter {meta_identifier_character};

// see 4.15
meta_identifier_character = letter | decimal_digit;

// see 4.19
special_sequence =
    special_sequence_symbol
    {special_sequence_character}
    special_sequence_symbol;

// see 4.20
// special sequence character
// = terminal character - special sequence symbol;
special_sequence_character =
    letter
    | decimal_digit
    | concatenate_symbol
    | defining_symbol
    | definition_separator_symbol
    | end_comment_symbol
    | end_group_symbol
    | end_option_symbol
    | end_repeat_symbol
    | except_symbol
    | first_quote_symbol
    | repetition_symbol
    | second_quote_symbol
    // | special_sequence_symbol
    | start_comment_symbol
    | start_group_symbol
    | start_option_symbol
    | start_repeat_symbol
    | terminator_symbol
    | other_character ;

// see 6.7
comment_symbol =
    bracketed_textual_comment
    | other_character
    | commentless_symbol;

// see 6.8
bracketed_textual_comment =
    start_comment_symbol {comment_symbol} end_comment_symbol;

// The final abstract structure part of the syntax defines syntax of
// Extended BNF, i.e.  in terms of the commentless symbols.

// see 6.5
// syntax = {gap separator}, gap free symbol, {gap separator},
//          {gap free symbol, {gap separator}};
//
// syntax = {bracketed textual comment},
//          commentless symbol,
//          {bracketed textual comment},
//          {commentless symbol,
//             {bracketed textual comment}},

rule_separator = comment | gap_separator ;

syntax = rule_separator+ {syntax_rule rule_separator*} ;

syntax_rule =
    meta_identifier defining_symbol definitions_list terminator_symbol;

definitions_list =
    single_definition
    {definition_separator_symbol single_definition};

single_definition =
    syntactic_term {concatenate_symbol syntactic_term};

syntactic_term =
    syntactic_factor [except_symbol syntactic_exception];

// see 4.6
// syntactic exception
// = ? a syntactic-factor that could be replaced by a 
//     syntactic-factor containing no meta-identifiers
//   ?
syntactic_exception = syntactic_factor ;

syntactic_factor = [integer repetition_symbol] syntactic_primary;

// http://grammatica.percederberg.net/doc/release/manual/productions.html
//
// "The EBNF dialect used in Grammatica currently does not allow null
// (i.e. empty) production alternatives. Instead, the same result can
// be obtained by making all references to the production optional
// with the [...] construct or similar."

syntactic_primary =
    optional_sequence
    | repeated_sequence
    | grouped_sequence
    | meta_identifier
    | terminal_string
    | special_sequence
    // | empty_sequence
    ;

optional_sequence =
    start_option_symbol definitions_list end_option_symbol;

repeated_sequence =
    start_repeat_symbol definitions_list end_repeat_symbol;

grouped_sequence =
    start_group_symbol definitions_list end_group_symbol;

// empty_sequence = comment ;

comment = "(*" {comment_symbol} "*)" ;

// !? Duplicate definition -- which one should we take? S.G.:
// comment_symbol =
//     comment | terminal_string | special_sequence | character ;
